##### blocks #####
{
    # this is a plain block. blocks can be useful for manipulating scope
}

# example #1:
var x = 5;
{
    x = 10;
    print(x); # prints 10
}
print(x); # prints 10

# example #2:
var x = 5;
{
    var x = 10;
    print(x); # prints 10
}
print(x); # prints 5

# in the following examples, blocks will be utilized for keeping the scopes between examples seperate.
# because this example was not in a scope, we will now delete the variables made to create a fresh start
del x;

##### safulate version constraints
{
    req v1; # require safulate v1.x.x
    req v1.1; # require safulate v1.1.x
    req v1.1.1; # require safulate v1.1.1
    req +v1; # require safulate v1 or above
    req -v1; # require safulate v1 or below
    req v1 - v5; # require any safulate version from v1.x.x to v5.x.x
}

##### importing #####
{
    req test; # import the builtin 'test' package under the 'test' var
    req hello @ test; # import the builtin 'test' package under the 'hello' var
    req hello @ "url"; # import the file from the url under the 'hello' var
}

##### variables #####
{
    var x; # declare a var named 'x' in current scope
    x = "test"; # assign a value for the 'x' var
    var y = "test"; # declare a var and set a value in current scope
    del x; # delete the var `x`
}

##### operations #####
{
    var x = 5;
    var y = 10;

    x + y;  # add
    x - y;  # subtract
    x / y;  # divide
    x * y;  # multiply
    x ** y; # power
    -x; # unary negative
    +x; # unary positive
    !x; # inverse of the boolean version of x
    !!x; # boolean version of x
    x == y; # equality
    x != y; # inequality
    x > y; # check if x is greater than y
    x < y; # check if y is greater than x
    x >= y; # check if x is greater than or equal to y
    x <= y; # check if y is greater than or equal to x
    x in y; # check if x is in y *NOTE: this simply calls the 'contains' spec on y with x as a argument.
    y contains x; # check if x contains y
    x | y; # boolean x or y
    x & y; # boolean x and y
}

##### functions #####
{
    print(); # call function
    print("arg1", "arg2"); # call function with args

    # define function
    func func_name(args){
        print(args);
    }
    func_name("test"); # prints 'test'

    # you can also use the 'return' keyword to return values
    func test(){
        return 5;
    }
    print(test()); # prints '5'
}

##### if statement #####
{
    # you can wrap the expr in parens or choose not to
    if 5 == 5 {
        print("This is true");
    }
    if (5 == 5) {
        print("This also runs");
    }
}

##### while loops #####
{
    # like if statements, the expression can be put in parens if desired
    while 5 == 5 {
        print("this will never end");
    }
}

##### for loops #####
{
    # you don't have to declare the var used in the loops, that is done for you behind the scenes.
    var abc = "abcdefg";
    for y in abc {
        print(y); # prints each character from the `abc` var on a new line
    }
}

##### break #####
{
    # the break statement can be used with any loop to escape it

    while 5 == 5 {
        print("1");
        break;
        print("2");
    }
    # this code only prints '1'.

    # the break keyword also accepts a number arg that lets you break out of multiple loops at the same time.
    while 1 {
        print("outer started");
        while 1 {
            print("middle started");
            while 1{
                print("inner started");
                break 3;
                print("inner ended");
            }
            print("middle ended");
        }
        print("outer ended");
    }
    # this prints the following text: "outer started", "middle started", "innter started"

    # you can also pass `0` into the break keyword to remove its affectiveness
    while 1 {
        print("hi");
        break 0;
    }
    # this will infinitely print 'hi'
}

##### continue #####
{
    # a continue statement kind of acts like a skip statement.
    # it can take a number arg, which defaults to 1.

    var x = list("first", "second", "apple", "pear", "foo", "car");

    # if the number arg is 1, the statement will skip the rest of the current loop and skip to the start of the next loop
    for item in x {
        print(x);
        continue;
        print("2");
    }
    # this code only prints the items in 'x', and never '2'.

    # if the number arg is more than 1, the statement will skip the rest of the current loop, and the never of loops equal to the number arg.
    # for example, 'continue 2;' would skip the rest of the current loop, and the entirety of the next loop.

    for item in x {
        print(x);
        continue 2;
        print("2");
    }
    # this code prints 'first', 'apple', 'foo'. it never prints '2', and skips every other item.

    # you can also pass `0` into the continue keyword to remove its affectiveness
    for item in x {
        print(item);
        continue 0;
        print("2");
    }
    # this will print the following:
    # first
    # 2
    # second
    # 2
    # apple
    # 2
    # pear
    # 2
    # foo
    # 2
    # car
    # 2
}

##### custom objects #####
{
    var x = object(); # you can create a new object via the `object` func

    # you can't edit attributes directly, but you can "enter" the object to edit it.
    # inside the block used in the edit object statement, the local scope is synced to the object
    x ~ {
        var test = "world";
    }
    print(x.test); # prints "world"

    ## you can also make methods. The parent of the method is exposed in the method via a `parent` var
    x ~ {
        func foo(){
            print(parent.test);
        }
    }
    x.foo(); # prints "world" from "x.test"
}

##### private attributes #####
{
    # when you access an attribute, you are only able to look up public attributes.
    # objects can have private attributes that are denoted by starting with the '$' character.
    # however they are only exposed in methods and while editing the object.
    # private attributes are defined with the `priv` keyword instead of the `var` keyword
    # example:

    var x = object();
    x ~ {
        priv test = "world";
        print($test); # prints "world"

        func foo(){
            # unlike public attributes where you have to do `parent.attr`, private attributes are directly exposed in methods
            print($test);
        }
    }
    x.foo(); # prints "world"
}

##### specs #####
{
    # every operation between objects internally calls a special function called a spec.
    # in an operation, the spec function of the object on the left value decides how the operation works.
    # specs can be defined like a function, but using the `spec` keyword in an object editing block.

    var x = object();
    x ~ {
        spec add(other){
            return 5;
        }
    }

    print(x + "test"); # prints '5' due to the 'add' spec defined in 'x'

    # specs are stored in a completely different spot than public and private attrs, and are never directly exposed to you.
    # however, every object comes with a private method called "get_specs" that gives you a new object that contains all of the specs on the object, and that way they can be called directly.
    # example:

    x ~ {
        var specs = $get_specs();
    }
    var value = x.specs.add("booya");
    print(value); # prints "5" from the add spec in "x"
}

##### raising errors #####
{
    # using the 'raise' keyword, you can raise anything like an error.

    raise "booya"; # raises the string "booya" and treats it like an error
}

##### try/catch #####
{
    # using a try/catch statement you can catch errors.
    # syntax for the block is as follows:
    # try {block} catch {block} else {block}
    # the catch and else branches are optional
    # to get the error you're catching, you can use:
    # try {block} catch e {block}
    # in this statement, the error that got raised will be assigned to the 'e' var.

    try {
        raise "foo";
    } catch e {
        print(e); # prints "foo"
    } else {
        print("success"); # never runs
    }

    try {
        1 + 1
    } else {
        print("success"); # runs
    }
}

##### switch/case #####
{
    # pretty much a normal switch/case statement but with some changes.
    # for instance: by default, there is no fallthrough.

    switch "test" {
        case "best" {
            print("best case"); # never runs
        }
        case "test" {
            print("test case"); # runs
        }
        case "foo" {
            print("foo case"); # never runs
        }
    }

    # to get a fallthrough behavior, the 'continue' keyword can be used.
    # for example:

    switch "test" {
        case "best" {
            print("best case"); # never runs
        }
        case "test" {
            print("test case"); # runs
            continue;
        }
        case "foo" {
            print("foo case"); # runs
        }
    }

    # the number arg passed to the 'continue' keyword can be used to skip certain cases.

    switch "best" {
        case "best" {
            print("best case"); # runs
            continue 2; # continues in the second case after this one
        }
        case "test" {
            print("test case"); # never runs
        }
        case "foo" {
            print("foo case"); # runs
        }
    }
}


##### string formatting #####
{
    # to format strings, there are 3 methods

    ## 1) normal concatentation
    print(
        "Hello" + " " + "World"
    ); # prints "Hello World"

    ## 2) .format
    print(
        "Hello {}, and welcome to {}.".format(
            "traveller",
            "hell"
        )
    ); # prints "Hello traveller, and welcome to hell."
    # the format method basically just goes through the given arguments and replaces the first instance of `{}` it sees with the arg.

    ## 3) f-strings
    # like python's f-strings, they are denoted by a "f" infront of the starting quote

    var name = "Max";

    print(
        f"Hello {name}, please stay a while."
    ); # prints "Hello Max, please stay a while."
}

##### lists #####
{
    # there are two ways to create a list

    # 1) with the 'list' function
    var x = list("first", "apple");

    # 2) with the list syntax
    var x = ["first", "apple"];
}

##### dicts #####
{
    # they don't exist. for now, use objects intead.
    # I'll probably add them eventually (most likely after I implement subscription), but they won't have any syntax sugar (the blocks make that hard)
}

##### type comparison #####
{
    # objects dont have 'classes', they are just objects.
    # however, you can check if a object is a certain builtin object.
    # to do so, you can use the 'types' module to get the type objects that will be used to compare the types.

    req types;

    # for the items in the types module, the "check" method can be used. it will return a number (0 or 1) that represents whether or not the given object is that builtin object.

    types.str.check("test"); # 1
    types.num.check("test"); # 0
    types.num.check(5); # 1
    types.list.check(5); # 0
    types.list.check(list("test")); # 1
}

##### structs #####
{
    # classes don't exist, however there is a struct statement.
    # syntax is the same as defining a function, but using the `struct` keyword instead.

    # example:

    struct obj_struct (val){
        let foo = val;
    }
    var x = obj_struct("apple");
    print(x.foo); # prints "apple"

    # since classes dont exist, the struct statement is literally just a shorthand for a function that creates and edits a new object.
    # for example, the interpreter turns the above struct into the following:

    func obj_struct(val){
        let x = object();
        x ~ {
            let foo = val;
        }
        return x;
    }
}

##### properties #####
# properties exist, and you ca use the `prop` soft keyword to create one, or make one yourself using the `get` spec.
# here are two examples that do basically the same thing, however one uses the `prop` soft keyword, and the other uses the `get` spec.
{
    var x = object();

    var hello;
    x ~ {
        prop foo(){
            return hello;
        }
    }

    print("first", x.foo);
    hello = "no";
    print("second", x.foo);
}

{
    struct test_prop(func){
        priv func = func;

        spec get(){
            return $func();
        }
    }

    var hello;
    var x = object();
    x ~ {
        func _foo(){
            return hello;
        }
        var foo = test_prop(_foo);
    }

    print("first", x.foo);
    hello = "no";
    print("second", x.foo);
}