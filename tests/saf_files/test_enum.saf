pub Enum(name, ...kwargs) {
    type {name;} @ NewEnum {
        pub members = [];
        priv name = name;

        for kwarg in kwargs.items() {
            pub value = $$(kwarg[0], kwarg[1]);
            members.append(value);

            $$ ~ {
                pub {value.name;} = value;
            };
        };
    } -> (name, value) {
        pub name = name;
        pub value = value;

        spec repr(){
            return f"{\\\name}.{$$.name}";
        };
    };

    return NewEnum;
};

pub ColorRoles = Enum(
    "ColorRoles",
    blue = 0,
    red = 1,
    purple = 2,
    green = 3
);

ColorRoles ~ {
    assert(\name == "ColorRoles");
};

assert(ColorRoles.blue.name == "blue");
assert(ColorRoles.blue.value == 0);
assert(ColorRoles.blue:r == "ColorRoles.blue");
assert(ColorRoles.check(ColorRoles.blue) == true);
assert(ColorRoles.members has ColorRoles.blue);

assert(ColorRoles.red.name == "red");
assert(ColorRoles.red.value == 1);
assert(ColorRoles.red:r == "ColorRoles.red");
assert(ColorRoles.check(ColorRoles.red) == true);
assert(ColorRoles.members has ColorRoles.red);

assert(ColorRoles.purple.name == "purple");
assert(ColorRoles.purple.value == 2);
assert(ColorRoles.purple:r == "ColorRoles.purple");
assert(ColorRoles.check(ColorRoles.purple) == true);
assert(ColorRoles.members has ColorRoles.purple);

assert(ColorRoles.green.name == "green");
assert(ColorRoles.green.value == 3);
assert(ColorRoles.green:r == "ColorRoles.green");
assert(ColorRoles.check(ColorRoles.green) == true);
assert(ColorRoles.members has ColorRoles.green);

